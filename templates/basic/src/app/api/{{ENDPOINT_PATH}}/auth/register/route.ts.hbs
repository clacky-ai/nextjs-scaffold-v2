{{#if hasSignUp}}
import { NextRequest, NextResponse } from 'next/server'
import bcrypt from 'bcryptjs'
import { db } from '@/lib/db'
import { {{tableName}} } from '@/lib/db/schema/{{kebabCase name}}-users'
import { eq } from 'drizzle-orm'
import { z } from 'zod'

const registerSchema = z.object({
  email: z.string().email('Invalid email format'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
  name: z.string().min(1, 'Name is required')
})

export async function POST(req: NextRequest) {
  try {
    const body = await req.json()
    
    // Validate input
    const validatedData = registerSchema.parse(body)
    const { email, password, name } = validatedData

    // Check if user already exists
    const existingUser = await db
      .select()
      .from({{tableName}})
      .where(eq({{tableName}}.email, email))
      .limit(1)

    if (existingUser.length > 0) {
      return NextResponse.json(
        { error: 'User already exists' },
        { status: 400 }
      )
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12)

    // Create user
    const [newUser] = await db
      .insert({{tableName}})
      .values({
        email,
        password: hashedPassword,
        name,
        {{#if roles.length}}
        role: '{{roles.[0]}}', // Default role
        {{/if}}
        createdAt: new Date(),
        updatedAt: new Date()
      })
      .returning({
        id: {{tableName}}.id,
        email: {{tableName}}.email,
        name: {{tableName}}.name
      })

    return NextResponse.json(
      { 
        message: 'User created successfully',
        user: newUser
      },
      { status: 201 }
    )

  } catch (error) {
    console.error('Registration error:', error)
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: error.errors[0].message },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
{{else}}
import { NextResponse } from 'next/server'

export async function POST() {
  return NextResponse.json(
    { error: 'Registration not supported for this endpoint' },
    { status: 404 }
  )
}
{{/if}}
