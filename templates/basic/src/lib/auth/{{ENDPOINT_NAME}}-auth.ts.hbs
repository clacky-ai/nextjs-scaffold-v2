import { NextAuthOptions } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'
import bcrypt from 'bcryptjs'
import { db } from '../db'
import { {{tableName}} } from '../db/schema/{{kebabCase name}}-users'
import { eq } from 'drizzle-orm'

export const {{camelCase name}}AuthOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      id: '{{name}}-credentials',
      name: '{{name}}-credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null
        }

        const user = await db.query.{{tableName}}.findFirst({
          where: eq({{tableName}}.email, credentials.email)
        })

        if (!user) {
          return null
        }

        {{#if (or (eq name 'customer') (eq name 'merchant'))}}
        // 检查用户是否被屏蔽
        if (user.isBlocked) {
          throw new Error('账号已被禁用')
        }
        {{/if}}

        {{#if (eq name 'merchant')}}
        // 检查商家是否已验证
        if (!user.isVerified) {
          throw new Error('账号尚未通过验证，请联系管理员')
        }
        {{/if}}

        const isPasswordValid = await bcrypt.compare(credentials.password, user.password)

        if (!isPasswordValid) {
          return null
        }

        return {
          id: user.id,
          email: user.email,
          name: user.name,
        }
      }
    })
  ],
  session: {
    strategy: 'jwt',
  },
  pages: {
    signIn: '{{#if useRouteGroup}}/sign-in{{else}}{{pathPrefix}}/sign-in{{/if}}',
  },
  {{#if (eq authType 'custom')}}
  cookies: {
    sessionToken: {
      name: '{{cookiePrefix}}-session-token',
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: process.env.NODE_ENV === 'production',
      }
    },
    csrfToken: {
      name: '{{cookiePrefix}}-csrf-token',
    }
  },
  {{/if}}
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id
      }
      return token
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id as string
      }
      return session
    },
  },
  secret: process.env.{{uppercaseSnakeCase name}}_NEXTAUTH_SECRET,
}